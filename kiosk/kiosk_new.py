# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'kiosk_new.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import pickle
import signal
import subprocess
import time
import os
from threading import Thread, Event

import qrcode
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import pyqtSlot, QThread, pyqtSignal, QTimer
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QProgressBar

from POSEHandler import POSEHandleMessage, endorse, createLocationClaim
from ble.ble import startBLE, startConnection
from utils import remove_spaces

from kiosk_picamera import readQRCode
#from card import readCard

from PIL.ImageQt import ImageQt

import qrcode

qr = qrcode.QRCode(
	version=None,
	error_correction=qrcode.constants.ERROR_CORRECT_L,
	box_size=10,
	border=0,
)
PBAR_INTERVAL = 40
PBAR_VALUE = 5
PBAR_BACKWARDS = False
processing = False
WINDOW_WIDTH = 600
WINDOW_HEIGHT = 360

proc1 = subprocess

StyleSheet = '''
#RedProgressBar {
	border: 2px solid #ee4460;
	border-radius: 5px;
	background-color: #E0E0E0;
}
#RedProgressBar::chunk {
	background-color: #ee4460;
	width: 10px; 
	margin: 0.5px;
}

#WhiteProgressBar {
	border: 2px solid #ee4460;
	border-radius: 5px;
	background: transparent;
}
#WhiteProgressBar::chunk {
	background-color: #E0E0E0;
	width: 10px; 
	margin: 0.5px;
}
'''


class ProgressBar(QProgressBar):

    def __init__(self, *args, **kwargs):
        super(ProgressBar, self).__init__(*args, **kwargs)


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        global red_bar_main, white_bar_main, red_bar_ble, white_bar_ble, proc1
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(WINDOW_WIDTH, WINDOW_HEIGHT)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        ######################
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(0, 0, 800, 480))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        ######################
        self.stackedWidget = QtWidgets.QStackedWidget(self.frame)
        self.stackedWidget.setGeometry(QtCore.QRect(0, 0, 800, 480))
        self.stackedWidget.setObjectName("stackedWidget")
        ######################
        self.main_page = QtWidgets.QWidget()
        self.main_page.setObjectName("main_page")
        ######################
        #self.main_surething_img = QtWidgets.QLabel(self.main_page)
        #self.create_sureThing_img(self.main_surething_img)
        ######################
        #self.main_surething_label = QtWidgets.QLabel(self.main_page)
        #self.create_SurePresence_label(self.main_surething_label)
        ########################
        """self.main_authenticate = QtWidgets.QLabel(self.main_page)
        self.main_authenticate.setEnabled(True)
        self.main_authenticate.setGeometry(QtCore.QRect(25, 120, 750, 60))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(18)
        font.setBold(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.main_authenticate.setFont(font)
        self.main_authenticate.setTextFormat(QtCore.Qt.AutoText)
        self.main_authenticate.setAlignment(QtCore.Qt.AlignCenter)
        self.main_authenticate.setObjectName("main_authenticate")"""
        ########################
        self.main_auth = QtWidgets.QLabel(self.main_page)
        self.main_auth.setEnabled(True)
        self.main_auth.setGeometry(QtCore.QRect(20, 10, 400, 60))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.main_auth.setFont(font)
        self.main_auth.setTextFormat(QtCore.Qt.AutoText)
        self.main_auth.setAlignment(QtCore.Qt.AlignCenter)
        self.main_auth.setObjectName("main_auth")
        #####################
        self.btn_cc = QtWidgets.QPushButton(self.main_page)
        self.btn_cc.setGeometry(40, 140, 120, 110)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        self.btn_cc.setFont(font)
        self.btn_cc.setObjectName("btn_cc")
        self.btn_cc.setIcon(QIcon('images/cc.png'))
        self.btn_cc.setIconSize(QtCore.QSize(140, 100))
        self.btn_cc.setStyleSheet("QPushButton"
                                  "{"
                                  "background-color : white;"
                                  "border: 0.5px solid grey"
                                  "}"
                                  "QPushButton::pressed"
                                  "{"
                                  "background-color : silver;"
                                  "}"
                                  )
        self.btn_cc.clicked.connect(self.change_screen_to_cc)
        #####################
        self.cc_description = QtWidgets.QLabel(self.main_page)
        self.cc_description.setEnabled(True)
        self.cc_description.setGeometry(QtCore.QRect(14, 240, 170, 60))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.cc_description.setFont(font)
        self.cc_description.setTextFormat(QtCore.Qt.AutoText)
        self.cc_description.setAlignment(QtCore.Qt.AlignCenter)
        self.cc_description.setObjectName("cc_description")
        #####################
        self.line1 = QtWidgets.QFrame(self.main_page)
        self.line1.setEnabled(True)
        self.line1.setObjectName("line")
        self.line1.setGeometry(QtCore.QRect(200, 100, 1, 220))
        self.line1.setFrameShape(QtWidgets.QFrame.VLine)
        self.line1.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line1.setStyleSheet("background-color: black")
        self.line1.setLineWidth(1)
        #####################
        self.btn_wearable = QtWidgets.QPushButton(self.main_page)
        self.btn_wearable.setGeometry(240, 140, 120, 110)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        self.btn_wearable.setFont(font)
        self.btn_wearable.setObjectName("btn_cc")
        self.btn_wearable.setIcon(QIcon('images/smartwatch.png'))
        self.btn_wearable.setIconSize(QtCore.QSize(150, 90))
        self.btn_wearable.setStyleSheet("QPushButton"
                                        "{"
                                        "background-color : white;"
                                        "border: 0.5px solid grey"
                                        "}"
                                        "QPushButton::pressed"
                                        "{"
                                        "background-color : silver;"
                                        "}"
                                        )
        self.btn_wearable.clicked.connect(self.change_screen_to_ble)
        #######################
        self.wearable_description = QtWidgets.QLabel(self.main_page)
        self.wearable_description.setEnabled(True)
        self.wearable_description.setGeometry(QtCore.QRect(215, 240, 170, 60))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.wearable_description.setFont(font)
        self.wearable_description.setTextFormat(QtCore.Qt.AutoText)
        self.wearable_description.setAlignment(QtCore.Qt.AlignCenter)
        self.wearable_description.setObjectName("wearable_description")
        #######################
        self.line2 = QtWidgets.QFrame(self.main_page)
        self.line2.setEnabled(True)
        self.line2.setObjectName("line")
        self.line2.setGeometry(QtCore.QRect(400, 100, 1, 220))
        self.line2.setFrameShape(QtWidgets.QFrame.VLine)
        self.line2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line2.setStyleSheet("background-color: black")
        self.line2.setLineWidth(1)
        #######################
        self.btn_smartphone = QtWidgets.QPushButton(self.main_page)
        self.btn_smartphone.setGeometry(440, 140, 120, 110)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        self.btn_smartphone.setFont(font)
        self.btn_smartphone.setObjectName("btn_cc")
        self.btn_smartphone.setIcon(QIcon('images/smartphone.png'))
        self.btn_smartphone.setIconSize(QtCore.QSize(140, 90))
        self.btn_smartphone.setStyleSheet("QPushButton"
                                          "{"
                                          "background-color : white;"
                                           "border: 0.5px solid grey"
                                          "}"
                                          "QPushButton::pressed"
                                          "{"
                                          "background-color : silver;"
                                          "}"
                                          )
        self.btn_smartphone.clicked.connect(self.change_screen_to_qr)
        ########################
        self.smartphone_description = QtWidgets.QLabel(self.main_page)
        self.smartphone_description.setEnabled(True)
        self.smartphone_description.setGeometry(QtCore.QRect(405, 240, 190, 60))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.smartphone_description.setFont(font)
        self.smartphone_description.setTextFormat(QtCore.Qt.AutoText)
        self.smartphone_description.setAlignment(QtCore.Qt.AlignCenter)
        self.smartphone_description.setObjectName("smartphone_description")
        ########################

        self.stackedWidget.addWidget(self.main_page)
        ########################
        """self.cc_auth = QtWidgets.QLabel(self.main_page)
        self.cc_auth.setEnabled(True)
        self.cc_auth.setGeometry(QtCore.QRect(25, 330, 750, 60))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(17)
        font.setBold(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.cc_auth.setFont(font)
        self.cc_auth.setTextFormat(QtCore.Qt.AutoText)
        self.cc_auth.setAlignment(QtCore.Qt.AlignCenter)
        self.cc_auth.setObjectName("cc_auth")"""
        ########################

        #########################################
        ########### NEW WIDGET PAGE #############
        #########################################

        self.ble_page = QtWidgets.QWidget()
        self.ble_page.setObjectName("ble_page")
        #######################
        self.btn_back_ble = QtWidgets.QPushButton(self.ble_page)
        self.create_back_button(self.btn_back_ble)
        self.btn_back_ble.clicked.connect(lambda: self.stackedWidget.setCurrentWidget(self.main_page))
        #######################
        self.btn_rescan = QtWidgets.QPushButton(self.ble_page)
        self.btn_rescan.setGeometry(QtCore.QRect(465, 180, 100, 40))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.btn_rescan.setFont(font)
        self.btn_rescan.setObjectName("btn_rescan")
        self.btn_rescan.clicked.connect(self.startBLE)
        #######################
        self.btn_confirmDevice = QtWidgets.QPushButton(self.ble_page)
        self.btn_confirmDevice.setGeometry(QtCore.QRect(200, 320, 200, 38))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(15)
        self.btn_confirmDevice.setFont(font)
        self.btn_confirmDevice.setObjectName("btn_confirmDevice")
        self.btn_confirmDevice.clicked.connect(self.createConnectingThread)
        self.btn_confirmDevice.setVisible(False)
        ########################
        self.lbl_notShowing = QtWidgets.QLabel(self.ble_page)
        self.lbl_notShowing.setEnabled(True)
        self.lbl_notShowing.setGeometry(QtCore.QRect(465, 130, 100, 60))

        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(13)
        font.setBold(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.lbl_notShowing.setFont(font)
        self.lbl_notShowing.setTextFormat(QtCore.Qt.AutoText)
        self.lbl_notShowing.setAlignment(QtCore.Qt.AlignCenter)
        self.lbl_notShowing.setObjectName("lbl_notShowing")

        self.ble_surething_img = QtWidgets.QLabel(self.ble_page)
        self.create_sureThing_img(self.ble_surething_img)

        self.ble_listwidget = QtWidgets.QListWidget(self.ble_page)
        self.ble_listwidget.setGeometry(QtCore.QRect(165, 115, 270, 200))
        self.ble_listwidget.setObjectName("ble_listwidget")
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(15)
        font.setBold(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.ble_listwidget.setFont(font)
        self.ble_listwidget.itemClicked.connect(lambda: self.btn_confirmDevice.setVisible(True)) # once an item is clicked, the confirm device button appears
        #self.ble_listwidget.itemDoubleClicked.connect(self.createConnectingThread) #double click behavior
        ########################
        self.ble_selectDevice = QtWidgets.QLabel(self.ble_page)
        self.ble_selectDevice.setEnabled(True)
        self.ble_selectDevice.setAlignment(QtCore.Qt.AlignCenter)
        self.ble_selectDevice.setGeometry(QtCore.QRect(160, 20, 280, 60))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(20)
        font.setBold(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.ble_selectDevice.setFont(font)
        self.ble_selectDevice.setTextFormat(QtCore.Qt.AutoText)
        self.ble_selectDevice.setAlignment(QtCore.Qt.AlignCenter)
        self.ble_selectDevice.setObjectName("ble_selectDevice")

        self.red_pbar_ble = ProgressBar(self.ble_page, minimum=0, maximum=100, textVisible=False,
                                        objectName="RedProgressBar")
        self.red_pbar_ble.setGeometry(205, 75, 190, 20)
        self.white_pbar_ble = ProgressBar(self.ble_page, minimum=0, maximum=100, textVisible=False,
                                          objectName="WhiteProgressBar")
        self.white_pbar_ble.setGeometry(205, 75, 190, 20)

        self.red_pbar_ble.setValue(PBAR_INTERVAL)
        self.red_pbar_ble.setVisible(False)
        self.white_pbar_ble.setValue(0)
        self.white_pbar_ble.setVisible(False)

        self.stackedWidget.addWidget(self.ble_page)

        #########################################
        ########### NEW WIDGET PAGE #############
        #########################################

        self.cc_page = QtWidgets.QWidget()
        self.cc_page.setObjectName("cc_page")
        # self.cc_page.setStyleSheet("background-color: #fffaf0")

        self.cc_sureThing_img = QtWidgets.QLabel(self.cc_page)
        self.create_sureThing_img(self.cc_sureThing_img)

        self.cc_instructions = QtWidgets.QLabel(self.cc_page)
        self.cc_instructions.setEnabled(True)
        self.cc_instructions.setGeometry(QtCore.QRect(25, 30, 600, 60))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.cc_instructions.setFont(font)
        self.cc_instructions.setTextFormat(QtCore.Qt.AutoText)
        self.cc_instructions.setAlignment(QtCore.Qt.AlignCenter)
        self.cc_instructions.setObjectName("cc_instructions")

        self.cc_reader = QtWidgets.QLabel(self.cc_page)
        self.cc_reader.setGeometry(QtCore.QRect(268, 100, 64, 64))
        self.cc_reader.setText("")
        self.cc_reader.setPixmap(QtGui.QPixmap("images/card_reader.png").scaledToWidth(64).scaledToHeight(64))
        self.cc_reader.setAlignment(QtCore.Qt.AlignCenter)

        self.cc_arrow = QtWidgets.QLabel(self.cc_page)
        self.cc_arrow.setGeometry(QtCore.QRect(286, 175, 28, 28))
        self.cc_arrow.setText("")
        self.cc_arrow.setPixmap(QtGui.QPixmap("images/up-arrow.png").scaledToWidth(28).scaledToHeight(28))
        self.cc_arrow.setAlignment(QtCore.Qt.AlignCenter)

        self.cc_card = QtWidgets.QLabel(self.cc_page)
        self.cc_card.setGeometry(QtCore.QRect(275, 215, 50, 84))
        self.cc_card.setText("")
        self.cc_card.setPixmap(QtGui.QPixmap("images/cc_resized.jpg").scaledToWidth(50).scaledToHeight(84))
        self.cc_card.setAlignment(QtCore.Qt.AlignCenter)

        self.btn_readCC = QtWidgets.QPushButton(self.cc_page)
        self.btn_readCC.setGeometry(QtCore.QRect(245, 310, 110, 41))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.btn_readCC.setFont(font)
        self.btn_readCC.setObjectName("btn_readCC")
        # self.btn_readCC.setStyleSheet("background-color: #ffffff")
        #self.btn_readCC.clicked.connect(self.CC_process)

        self.red_pbar_cc = ProgressBar(self.cc_page, minimum=0, maximum=100, textVisible=False,
                                       objectName="RedProgressBar")
        self.red_pbar_cc.setGeometry(390, 160, 180, 25)
        self.red_pbar_cc.setVisible(False)

        self.white_pbar_cc = ProgressBar(self.cc_page, minimum=0, maximum=100, textVisible=False,
                                         objectName="WhiteProgressBar")
        self.white_pbar_cc.setGeometry(390, 160, 180, 25)
        self.white_pbar_cc.setVisible(False)

        self.red_pbar_cc.setValue(PBAR_INTERVAL)
        self.white_pbar_cc.setValue(0)

        self.btn_back_cc = QtWidgets.QPushButton(self.cc_page)
        self.create_back_button(self.btn_back_cc)
        self.btn_back_cc.clicked.connect(lambda: terminate(proc1, self.stackedWidget, self.main_page))

        self.cc_warning = QtWidgets.QLabel(self.cc_page)
        self.cc_warning.setEnabled(True)
        self.cc_warning.setGeometry(QtCore.QRect(450, 320, 350, 60))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        font.setBold(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.cc_warning.setFont(font)
        self.cc_warning.setTextFormat(QtCore.Qt.AutoText)
        self.cc_warning.setAlignment(QtCore.Qt.AlignCenter)
        self.cc_warning.setObjectName("cc_warning")
        self.cc_warning.setStyleSheet("color: red")
        self.cc_warning.setVisible(False)

        self.stackedWidget.addWidget(self.cc_page)

        #########################################
        ########### NEW WIDGET PAGE #############
        #########################################

        self.qr_page = QtWidgets.QWidget()
        self.qr_page.setObjectName("qr_page")

        self.qr_sureThing_img = QtWidgets.QLabel(self.qr_page)
        self.create_sureThing_img(self.qr_sureThing_img)

        self.btn_back_qr = QtWidgets.QPushButton(self.qr_page)
        self.create_back_button(self.btn_back_qr)
        self.btn_back_qr.clicked.connect(lambda: self.stackedWidget.setCurrentWidget(self.main_page))

        self.qr_instruction1 = QtWidgets.QLabel(self.qr_page)
        self.qr_instruction1.setEnabled(True)
        self.qr_instruction1.setGeometry(QtCore.QRect(0, 0, 600, 60))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(15)
        font.setBold(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.qr_instruction1.setFont(font)
        self.qr_instruction1.setTextFormat(QtCore.Qt.AutoText)
        self.qr_instruction1.setAlignment(QtCore.Qt.AlignCenter)
        self.qr_instruction1.setObjectName("qr_instruction1")

        self.qr_image_instruction = QtWidgets.QLabel(self.qr_page)
        self.qr_image_instruction.setGeometry(QtCore.QRect(80, 50, 440, 330))
        self.qr_image_instruction.setText("")
        self.qr_image_instruction.setPixmap(QtGui.QPixmap("images/QRinstructions.png").scaledToWidth(440).scaledToHeight(330))
        self.qr_image_instruction.setAlignment(QtCore.Qt.AlignCenter)

        """self.qr_instruction2 = QtWidgets.QLabel(self.qr_page)
        self.qr_instruction2.setEnabled(True)
        self.qr_instruction2.setGeometry(QtCore.QRect(0, 130, 600, 60))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(15)
        font.setBold(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.qr_instruction2.setFont(font)
        self.qr_instruction2.setTextFormat(QtCore.Qt.AutoText)
        self.qr_instruction2.setAlignment(QtCore.Qt.AlignCenter)
        self.qr_instruction2.setObjectName("qr_instruction2")"""

        """self.qr_icon = QtWidgets.QLabel(self.qr_page)
        self.qr_icon.setGeometry(QtCore.QRect(236, 190, 128, 128))
        self.qr_icon.setText("")
        self.qr_icon.setPixmap(QtGui.QPixmap("images/qr-code.png").scaledToWidth(128).scaledToHeight(128))
        self.qr_icon.setAlignment(QtCore.Qt.AlignCenter)"""

        self.red_pbar_qr = ProgressBar(self.qr_page, minimum=0, maximum=100, textVisible=False,
                                       objectName="RedProgressBar")
        self.red_pbar_qr.setGeometry(390, 160, 180, 25)
        self.red_pbar_qr.setVisible(False)

        self.white_pbar_qr = ProgressBar(self.qr_page, minimum=0, maximum=100, textVisible=False,
                                         objectName="WhiteProgressBar")
        self.white_pbar_qr.setGeometry(390, 160, 180, 25)
        self.white_pbar_qr.setVisible(False)

        self.red_pbar_qr.setValue(PBAR_INTERVAL)
        self.white_pbar_qr.setValue(0)

        self.stackedWidget.addWidget(self.qr_page)

        #########################################
        ########### NEW WIDGET PAGE #############
        #########################################


        self.scan_page = QtWidgets.QWidget()
        self.scan_page.setObjectName("scan_page")

        self.btn_back_scan = QtWidgets.QPushButton(self.scan_page)
        self.create_back_button_scan(self.btn_back_scan)
        self.btn_back_scan.clicked.connect(lambda: self.stackedWidget.setCurrentWidget(self.main_page))

        self.btn_home = QtWidgets.QPushButton(self.scan_page)
        self.create_home_button(self.btn_home)

        self.scan_instruction = QtWidgets.QLabel(self.scan_page)
        self.scan_instruction.setEnabled(True)
        self.scan_instruction.setGeometry(QtCore.QRect(0, 0, 600, 60))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.scan_instruction.setFont(font)
        self.scan_instruction.setTextFormat(QtCore.Qt.AutoText)
        self.scan_instruction.setAlignment(QtCore.Qt.AlignCenter)
        self.scan_instruction.setObjectName("scan_instruction")

        self.scan_qr = QtWidgets.QLabel(self.scan_page)
        self.scan_qr.setGeometry(QtCore.QRect(190, 50, 240, 240))
        self.scan_qr.setText("")
        #self.scan_qr.setPixmap(
        #    QtGui.QPixmap("images/qrCode_test.png").scaledToWidth(220).scaledToHeight(220))
        self.scan_qr.setAlignment(QtCore.Qt.AlignCenter)

        self.scan_visual_instruction = QtWidgets.QLabel(self.scan_page)
        self.scan_visual_instruction.setGeometry(QtCore.QRect(230, 240, 300, 150))
        self.scan_visual_instruction.setText("")
        self.scan_visual_instruction.setPixmap(
            QtGui.QPixmap("images/scan_instruction.png").scaledToWidth(810).scaledToHeight(609))
        self.scan_visual_instruction.setAlignment(QtCore.Qt.AlignCenter)

        self.scan_how = QtWidgets.QLabel(self.scan_page)
        self.scan_how.setEnabled(True)
        self.scan_how.setGeometry(QtCore.QRect(30, 315, 600, 60))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.scan_how.setFont(font)
        self.scan_how.setTextFormat(QtCore.Qt.AutoText)
        self.scan_how.setAlignment(QtCore.Qt.AlignLeft)
        self.scan_how.setObjectName("scan_how")

        self.stackedWidget.addWidget(self.scan_page)

        #########################################
        ########### NEW WIDGET PAGE #############
        #########################################

        self.final_page = QtWidgets.QWidget()
        self.final_page.setObjectName("final_page")

        self.final_page_text = QtWidgets.QLabel(self.final_page)
        self.final_page_text.setEnabled(True)
        self.final_page_text.setAlignment(QtCore.Qt.AlignCenter)
        self.final_page_text.setGeometry(QtCore.QRect(50, 20, 500, 120))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(22)
        font.setBold(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.final_page_text.setFont(font)
        self.final_page_text.setTextFormat(QtCore.Qt.AutoText)
        self.final_page_text.setAlignment(QtCore.Qt.AlignCenter)
        self.final_page_text.setObjectName("final_page_text")
        self.final_page_home = QtWidgets.QPushButton(self.final_page)
        self.final_page_home.setGeometry(QtCore.QRect(225, 200, 150, 130))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.final_page_home.setFont(font)
        self.final_page_home.setObjectName("btn_home")
        self.final_page_home.setIcon(QIcon('images/home.png'))
        self.final_page_home.setIconSize(QtCore.QSize(120, 135))
        self.final_page_home.clicked.connect(lambda: self.stackedWidget.setCurrentWidget(self.main_page))

        self.stackedWidget.addWidget(self.final_page)


        #########################################
        MainWindow.setCentralWidget(self.centralwidget)
        self.retranslateUi(MainWindow)
        self.stackedWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    ############## Functions ################

    def create_home_button(self, object):
        object.setGeometry(QtCore.QRect(510, 40, 50, 40))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        object.setFont(font)
        object.setObjectName("btn_home")
        object.setIcon(QIcon('images/home.png'))
        object.setIconSize(QtCore.QSize(35, 45))
        object.clicked.connect(lambda: self.stackedWidget.setCurrentWidget(self.main_page))

    def create_back_button_scan(self, object):
        object.setGeometry(QtCore.QRect(40, 40, 50, 40))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        object.setFont(font)
        object.setObjectName("btn_back")
        object.setIcon(QIcon('images/back.png'))
        object.setIconSize(QtCore.QSize(35, 45))
        object.clicked.connect(lambda: self.stackedWidget.setCurrentWidget(self.qr_page))


    def create_back_button(self, object):
        object.setGeometry(QtCore.QRect(40, 40, 50, 40))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        object.setFont(font)
        object.setObjectName("btn_back")
        object.setIcon(QIcon('images/back.png'))
        object.setIconSize(QtCore.QSize(35, 45))

    def create_sureThing_img(self, object):
        object.setGeometry(QtCore.QRect(520, 280, 36, 61))
        object.setText("")
        object.setPixmap(QtGui.QPixmap("images/surething.png"))
        object.setAlignment(QtCore.Qt.AlignCenter)

    # object.setObjectName(object.objectName())

    def create_SurePresence_label(self, object):
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(18)
        font.setBold(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        object.setEnabled(True)
        object.setFont(font)
        object.setTextFormat(QtCore.Qt.AutoText)
        object.setAlignment(QtCore.Qt.AlignCenter)
        object.setObjectName("main_surething_label")
        object.setStyleSheet("color : #EC2444")
        object.setGeometry(QtCore.QRect(290, 70, 220, 60))

    def CC_process(self):
        print("CC process")
        #startProgressBar(self.red_pbar_cc, self.white_pbar_cc)
        cc_thread = AsyncCCReader(self.red_pbar_cc, self.white_pbar_cc, self.cc_warning, self.btn_readCC, self.stackedWidget, self.final_page)
        cc_thread.start()
        self.btn_readCC.setVisible(False)

    def QR_process(self):
        print("QR process")
        #startProgressBar(self.red_pbar_qr, self.white_pbar_qr) showing progress bar would give the wrong idea of processing
        qr_thread = AsyncQRCodeReader(self.red_pbar_qr, self.white_pbar_qr, self.scan_qr,         self.stackedWidget, self.scan_page)
        qr_thread.start()

    def startBLE(self):
        startProgressBar(self.red_pbar_ble, self.white_pbar_ble)
        self.ble_process()

    def ble_process(self):
        """Create and run 2 threads responsible for BLE scanning"""
        print("BLE process")
        # Thread responsible for scanning devices and storing them in the devices.p binary file
        scanThread = Thread(target=self.bleScan)
        scanThread.start()

        # Thread responsible for reading the devices.p file and updating the GUI with the scanned devices
        #thread2 = Thread(target=self.ble_updater, kwargs=dict(scan_thread=scanThread))
        #thread2.start()

        ble_thread = AsyncBLEDeviceReader(self.red_pbar_ble, self.white_pbar_ble, self.ble_selectDevice, scanThread, self.ble_listwidget)
        ble_thread.start()

    def bleScan(self):
        self.ble_listwidget.clear()
        self.ble_selectDevice.setText("Scanning...")
        startBLE()

    def ble_updater(self, scan_thread):
        scan_thread.join()  # needs to wait for the other thread to finish and create the devices.p file
        self.updateListWidget()
        stopProgressBar(self.red_pbar_ble, self.white_pbar_ble)
        self.ble_selectDevice.setText("Select your device")

    def change_screen_to_ble(self):
        self.stackedWidget.setCurrentWidget(self.ble_page)
        self.startBLE()

    def change_screen_to_cc(self):
        self.stackedWidget.setCurrentWidget(self.cc_page)
        self.CC_process()

    def change_screen_to_qr(self):
        self.stackedWidget.setCurrentWidget(self.qr_page)
        self.QR_process()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "SurePresence"))
        #self.main_surething_label.setText(_translate("MainWindow", "SurePresence"))
        #self.main_authenticate.setText(_translate("MainWindow", "Welcome"))
        self.main_auth.setText(_translate("MainWindow", "Please select an authentication method"))
        self.cc_description.setText(_translate("MainWindow", "Citizen Card"))
        self.wearable_description.setText(_translate("MainWindow", "Smartwatch"))
        self.smartphone_description.setText(_translate("MainWindow", "Smartphone"))
        #self.cc_auth.setText(_translate("MainWindow", "Don't have any of them? Use your citizen card!"))
        self.btn_rescan.setText(_translate("MainWindow", "Rescan"))
        self.btn_confirmDevice.setText(_translate("MainWindow", "Confirm device"))
        self.lbl_notShowing.setText(_translate("MainWindow", "Not showing?"))
        self.ble_selectDevice.setText(_translate("MainWindow", "Scanning..."))
        self.cc_instructions.setText(_translate("MainWindow", "Introduce your Citizen Card as showed below"))
        #self.btn_readCC.setText(_translate("MainWIndow", "Read Card"))
        self.qr_instruction1.setText(_translate("MainWindow", "1. Go to the QR Code section in your SurePresence App"))
        self.scan_instruction.setText(_translate("MainWindow", "Scan this using your SurePresence App"))
        self.scan_how.setText(_translate("MainWindow", "How? In your App go to:"))
        #self.qr_instruction2.setText(_translate("MainWindow", "2. Display your QR Code to the camera"))
        self.cc_warning.setText(_translate("MainWindow", "Citizen Card not introduced."))
        self.final_page_text.setText(_translate("MainWindow", "You are now authenticated.\n\nYou can head to your appointment."))

    def updateListWidget(self):
        """Reads the devices.p binary file and updated the listbox with the scanned devices"""
        global devices
        try:
            devices = pickle.load(open("./devices.p", "rb"))
        except FileNotFoundError as e:
            print(e)
        for i in devices.values():
            item = QtWidgets.QListWidgetItem(i)
            item.setSizeHint(QtCore.QSize(self.ble_listwidget.width()-5, 35))
            self.ble_listwidget.addItem(item)

        #self.ble_listwidget.addItems(devices.values())

    def connectToDevice(self):
        global devices
        active_name = self.ble_listwidget.selectedItems()[0].text()
        for mac, name in devices.items():
            if (name == active_name):
                response = startConnection(mac)
                bytes_string = bytes.fromhex(remove_spaces(response))
                #ascii_string = bytes_string.decode("ASCII")
                POSEHandleMessage(bytes_string)
                self.stackedWidget.setCurrentWidget(self.final_page)

    def createConnectingThread(self):
        thread1 = Thread(target=self.connectToDevice)
        thread1.start()


#############################################
################# Threads ###################
#############################################

def signal_accept(msg, rbar, wbar):
    global PBAR_BACKWARDS, red_bar_main, white_bar_main
    if (PBAR_BACKWARDS):
        rbar.setValue(PBAR_INTERVAL + int(msg))
        wbar.setValue(int(msg))
    else:
        rbar.setValue(PBAR_INTERVAL + int(msg))
        wbar.setValue(int(msg))

    if (int(msg) == 59):
        PBAR_BACKWARDS = True

    elif (int(msg) == 0):
        PBAR_BACKWARDS = False


class ProgressThread(QThread):
    """Thread responsible for the progress bars"""
    _signal = pyqtSignal(int, ProgressBar, ProgressBar)

    def __init__(self, rbar, wbar):
        super(ProgressThread, self).__init__()
        self._stop_event = Event()
        self.wbar = wbar
        self.rbar = rbar

    def __del__(self):
        self.wait()

    def stop(self):
        self._stop_event.set()

    def stopped(self):
        return self._stop_event.is_set()

    def run(self):
        global PBAR_BACKWARDS, processing
        while (processing):
            for i in range(100 - PBAR_INTERVAL):
                time.sleep(0.1)
                if (self.stopped()):
                    return
                else:
                    self._signal.emit(i, self.rbar, self.wbar)

            for i in range(100 - PBAR_INTERVAL, 0, -1):
                time.sleep(0.1)
                if (self.stopped()):
                    return
                else:
                    self._signal.emit(i, self.rbar, self.wbar)


##############################################

class AsyncCCReader(Thread):
    """Thread that will read information from the citizen card"""

    def __init__(self, rbar, wbar, lbl, btn, stacked, widget):
        super().__init__()
        self.wbar = wbar
        self.rbar = rbar
        self.lbl = lbl
        self.btn = btn
        self.stacked = stacked
        self.widget = widget

    def run(self):
        info = readCard().read().decode("latin-1")  # in bytes
        info = info[:-3]
        try:
            if (info != "null"):
                info = info[:-2]  # remove \r\n
                fields = info.split('|')
                CC_name = fields[0]
                CC_ID = fields[1]
                endorse(createLocationClaim(CC_ID))  # add photo as evidence
                self.lbl.setVisible(False)
                self.stacked.setCurrentWidget(self.widget)
        except IndexError as e:
            print(e)            
            #self.lbl.setVisible(True)
            #stopProgressBar(self.rbar, self.wbar)
            #self.btn.setVisible(True)



######################################

class AsyncQRCodeReader(Thread):
    """Thread that will read information from the citizen card"""

    def __init__(self, rbar, wbar, visual, widget, page):
        super().__init__()
        self.rbar = rbar
        self.wbar = wbar
        self.visual = visual
        self.widget = widget
        self.page = page

    def run(self):
        signedLE = POSEHandleMessage(readQRCode())
        qr.add_data(signedLE)
        qr.make(fit=True)
        img = qr.make_image(fill_color="black", back_color="white")
        qim = ImageQt(img)
        self.visual.setPixmap(QtGui.QPixmap.fromImage(qim).scaledToWidth(240).scaledToHeight(240))
        self.widget.setCurrentWidget(self.page)
        #stopProgressBar(self.rbar, self.wbar)

######################################

class AsyncBLEDeviceReader(Thread):
    """Thread that will update the ListWidget"""

    def __init__(self, rbar, wbar, text, scanThread, widget):
        super().__init__()
        self.rbar = rbar
        self.wbar = wbar
        self.text = text
        self.scanThread = scanThread
        self.widget = widget


    def run(self):
        counter = 0
        global devices
        while(True):
            if(os.path.exists("./devices/device_" + str(counter+1) + ".p")):    
                print(counter)
                devices = pickle.load(open("./devices/device_" + str(counter) + ".p", "rb"))
                for i in devices.values():
                    item = QtWidgets.QListWidgetItem(i)
                    item.setSizeHint(QtCore.QSize(self.widget.width() - 5, 35))
                    self.widget.addItem(item)
                counter += 1
            else:
                if(self.scanThread.is_alive()):
                    continue
                else:
                    devices = pickle.load(open("./devices/device_" + str(counter) + ".p", "rb"))
                    for i in devices.values():
                        item = QtWidgets.QListWidgetItem(i)
                        item.setSizeHint(QtCore.QSize(self.widget.width() - 5, 35))
                        self.widget.addItem(item)
                        stopProgressBar(self.rbar, self.wbar)
                        self.text.setText("Select your device")
                        os.system("rm ./devices/*")
                        return


######################################
######## Progress Bar methods ########
######################################

def startProgressBar(rbar, wbar):
    global processing, P_Thread_Main
    processing = True
    rbar.setVisible(True)
    wbar.setVisible(True)
    P_Thread_Main = ProgressThread(rbar, wbar)
    P_Thread_Main._signal.connect(signal_accept)
    P_Thread_Main.start()


def stopProgressBar(rbar, wbar):
    global processing, P_Thread_Main
    P_Thread_Main.stop()
    processing = False
    rbar.setVisible(False)
    wbar.setVisible(False)
    rbar.setValue(PBAR_INTERVAL)
    wbar.setValue(0)

######################################
########## External methods ##########
######################################

def readCard():
    global proc1
    print(sys.platform)
    if (sys.platform == "linux"):
        proc = subprocess.run('javac -cp .:./lib/pteidlibj.jar main.java', shell=True, stdout=subprocess.PIPE,
                              stderr=subprocess.STDOUT)
        proc1 = subprocess.Popen(args=["java", "-Djava.library.path=/usr/local/lib", "-cp", "lib/pteidlibj.jar:.", "main"],
                               stdout=subprocess.PIPE, stderr=subprocess.STDOUT, preexec_fn=os.setsid)
    elif (sys.platform == "win32"):
        proc = subprocess.run('javac -cp lib\pteidlibj.jar main.java', stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        proc1 = subprocess.run('java -cp lib/pteidlibj.jar;. main', stdout=subprocess.PIPE, stderr=subprocess.STDOUT)

    return proc1.stdout

def terminate(proc, widget, page):
    os.killpg(os.getpgid(proc.pid), signal.SIGTERM)
    print("DEAD")
    widget.setCurrentWidget(page)


if __name__ == "__main__":
    import sys

    devices = {}

    P_Thread_Main = ProgressThread

    app = QtWidgets.QApplication(sys.argv)
    app.setStyleSheet(StyleSheet)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.setWindowIcon(QIcon("images/surething.png"))
    MainWindow.show()
    sys.exit(app.exec_())
